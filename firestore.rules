rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      // TEMPORARY DEBUGGING for CREATE:
      // Allow creating a user document if the document's ID ($userId)
      // matches the 'uid' field being written into the document.
      // This sidesteps issues with `request.auth` in server actions for now.
      allow create: if request.resource.data.uid == userId;

      // Stricter read for now, assuming client-side fetches after auth.
      allow read: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false;
    }

    // Salons:
    match /salons/{salonId} {
      allow read: if true;
      allow create: if request.auth != null &&
                       request.resource.data.ownerUid == request.auth.uid &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner';
      allow update: if request.auth != null &&
                       resource.data.ownerUid == request.auth.uid &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner' &&
                       request.resource.data.ownerUid == resource.data.ownerUid;
      allow delete: if request.auth != null &&
                       resource.data.ownerUid == request.auth.uid &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner';
    }

    // Services
    match /services/{serviceId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null &&
                                     (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner' ||
                                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'staff');
    }

    // Staff
    match /staff/{staffId} {
      allow read: if true;
      function isUserSalonOwner(userId_func, salonId_func) { // Renamed params to avoid conflict
        return exists(/databases/$(database)/documents/users/$(userId_func)) &&
               get(/databases/$(database)/documents/users/$(userId_func)).data.role == 'owner' &&
               exists(/databases/$(database)/documents/salons/$(salonId_func)) &&
               get(/databases/$(database)/documents/salons/$(salonId_func)).data.ownerUid == userId_func;
      }
      allow create: if request.auth != null &&
                       isUserSalonOwner(request.auth.uid, request.resource.data.salonId);
      allow update: if request.auth != null &&
                       isUserSalonOwner(request.auth.uid, resource.data.salonId) &&
                       request.resource.data.salonId == resource.data.salonId;
      allow delete: if request.auth != null &&
                       isUserSalonOwner(request.auth.uid, resource.data.salonId);
    }

    // Bookings
    match /bookings/{bookingId} {
      allow create: if request.auth != null &&
                       request.resource.data.customerEmail == request.auth.token.email;
      function isBookingCustomer() {
        // Assumes request.auth != null is checked by the calling rule
        return request.auth != null && request.auth.token.email == resource.data.customerEmail;
      }
      function isOwnerOfBookedSalon() {
        // Assumes request.auth != null is checked by the calling rule
        return request.auth != null &&
               exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner' &&
               exists(/databases/$(database)/documents/salons/$(resource.data.salonId)) &&
               get(/databases/$(database)/documents/salons/$(resource.data.salonId)).data.ownerUid == request.auth.uid;
      }
      function isStaffOfBookedSalon() {
        // Assumes request.auth != null is checked by the calling rule
        return request.auth != null &&
               exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'staff' &&
               exists(/databases/$(database)/documents/staff/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/staff/$(request.auth.uid)).data.salonId == resource.data.salonId;
      }
      allow read, update, delete: if request.auth != null &&
                                     (isBookingCustomer() ||
                                      isOwnerOfBookedSalon() ||
                                      isStaffOfBookedSalon());
    }
  }
}
