rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users:
    // VERY TEMPORARY DEBUGGING: Allow ANYONE to create ANY user document.
    // THIS IS HIGHLY INSECURE. REVERT IMMEDIATELY AFTER TESTING to:
    // allow create: if request.auth != null && request.auth.uid == userId;
    match /users/{userId} {
      allow create: if true; // EXTREMELY PERMISSIVE FOR DEBUGGING
      allow read: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false; // Prevent client-side deletion
    }

    // Salons:
    // - Anyone can read salon listings and details.
    // - Only authenticated 'owner' users can create salons for themselves.
    // - Only the salon's owner can update or delete it. ownerUid cannot be changed.
    match /salons/{salonId} {
      allow read: if true;
      allow create: if request.auth != null &&
                       request.resource.data.ownerUid == request.auth.uid &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner';
      allow update: if request.auth != null &&
                       resource.data.ownerUid == request.auth.uid &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner' &&
                       request.resource.data.ownerUid == resource.data.ownerUid; // ownerUid is immutable
      allow delete: if request.auth != null &&
                       resource.data.ownerUid == request.auth.uid &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner';
    }

    // Services (Global specific services):
    // - Anyone can read services.
    // - Authenticated 'owners' or 'staff' can manage services.
    match /services/{serviceId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null &&
                                     (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner' ||
                                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'staff');
    }

    // Staff:
    // - Anyone can read staff details.
    // - Only an authenticated 'owner' can create staff for a salon they own.
    // - Only an authenticated 'owner' can update/delete staff from a salon they own. salonId is immutable for existing staff.
    match /staff/{staffId} {
      allow read: if true;

      function isUserSalonOwner(userId_func, salonId_func) {
        return exists(/databases/$(database)/documents/users/$(userId_func)) &&
               get(/databases/$(database)/documents/users/$(userId_func)).data.role == 'owner' &&
               exists(/databases/$(database)/documents/salons/$(salonId_func)) &&
               get(/databases/$(database)/documents/salons/$(salonId_func)).data.ownerUid == userId_func;
      }

      allow create: if request.auth != null &&
                       isUserSalonOwner(request.auth.uid, request.resource.data.salonId);
      allow update: if request.auth != null &&
                       isUserSalonOwner(request.auth.uid, resource.data.salonId) &&
                       request.resource.data.salonId == resource.data.salonId; // salonId is immutable
      allow delete: if request.auth != null &&
                       isUserSalonOwner(request.auth.uid, resource.data.salonId);
    }

    // Bookings:
    // - Authenticated users can create bookings for themselves.
    // - Customers can read/update/delete their own bookings.
    // - Owners/Staff of the booked salon can read/update/delete bookings for that salon.
    match /bookings/{bookingId} {
      allow create: if request.auth != null &&
                       request.resource.data.customerEmail == request.auth.token.email;

      function isBookingCustomer() {
        // Assumes request.auth != null is checked by the calling rule
        return request.auth.token.email == resource.data.customerEmail;
      }

      function isOwnerOfBookedSalon() {
        // Assumes request.auth != null is checked by the calling rule
        return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner' &&
               exists(/databases/$(database)/documents/salons/$(resource.data.salonId)) &&
               get(/databases/$(database)/documents/salons/$(resource.data.salonId)).data.ownerUid == request.auth.uid;
      }

      function isStaffOfBookedSalon() {
        // Assumes request.auth != null is checked by the calling rule
        // Assumes staff document ID is their auth UID and they have a user profile with role 'staff'
        return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'staff' &&
               exists(/databases/$(database)/documents/staff/$(request.auth.uid)) && // Check if staff doc exists
               get(/databases/$(database)/documents/staff/$(request.auth.uid)).data.salonId == resource.data.salonId;
      }

      allow read, update, delete: if request.auth != null &&
                                     (isBookingCustomer() ||
                                      isOwnerOfBookedSalon() ||
                                      isStaffOfBookedSalon());
    }
  }
}
